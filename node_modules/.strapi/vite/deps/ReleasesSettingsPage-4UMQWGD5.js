import {
  SETTINGS_SCHEMA
} from "./chunk-TL423H6F.js";
import {
  useTypedSelector
} from "./chunk-MRZ4SHZJ.js";
import {
  getTimezones,
  useGetReleaseSettingsQuery,
  useUpdateReleaseSettingsMutation
} from "./chunk-2PA5CSLN.js";
import "./chunk-BME6RM4V.js";
import "./chunk-BRZPFF5Q.js";
import "./chunk-2K2OJ6LB.js";
import "./chunk-4J3VOWQV.js";
import "./chunk-S4CCLKAD.js";
import "./chunk-GDJY4RGU.js";
import "./chunk-WTIUMJU3.js";
import "./chunk-DKZQIRB7.js";
import "./chunk-GFF7W2AF.js";
import "./chunk-J2PM6WI7.js";
import "./chunk-Y4RR5YQO.js";
import "./chunk-HULY4JRW.js";
import "./chunk-A24KRZSD.js";
import "./chunk-UA3SUHF3.js";
import "./chunk-QU2LYMZX.js";
import "./chunk-LHECCKXZ.js";
import "./chunk-UGODW6W2.js";
import "./chunk-X7GIGLLF.js";
import "./chunk-KSS6X42G.js";
import "./chunk-RAZDV6NY.js";
import "./chunk-A5LJBSMH.js";
import "./chunk-ZEULAMGP.js";
import "./chunk-QIJGNK42.js";
import "./chunk-ZQEV4TPY.js";
import "./chunk-NB7M45EM.js";
import "./chunk-6DL62I5J.js";
import "./chunk-7SWYLNQM.js";
import "./chunk-VNUNK7VE.js";
import "./chunk-XWXUIMUC.js";
import "./chunk-IFOFBKTA.js";
import "./chunk-ROYG4OF2.js";
import "./chunk-NQSRW5O3.js";
import "./chunk-OHWPYT75.js";
import "./chunk-MAHEC27J.js";
import {
  Form,
  useField
} from "./chunk-JOJRAWIL.js";
import {
  useRBAC
} from "./chunk-Q2KLBG3G.js";
import "./chunk-FFBCA6Q4.js";
import {
  Layouts
} from "./chunk-ITBAD2AQ.js";
import "./chunk-PQINNV4N.js";
import "./chunk-ZPH6YYXY.js";
import {
  Page,
  useAPIErrorHandler
} from "./chunk-QW75VRW2.js";
import "./chunk-7PBF54JY.js";
import "./chunk-6DDO46H4.js";
import "./chunk-5AMSERGP.js";
import "./chunk-6SQZEZYL.js";
import {
  useNotification
} from "./chunk-VHSZPQ7A.js";
import {
  isFetchError
} from "./chunk-5CYHFEZZ.js";
import "./chunk-EGSWFI2C.js";
import "./chunk-ZGCR6WZZ.js";
import "./chunk-5VODLFKF.js";
import {
  Button,
  Combobox,
  Field,
  Flex,
  Grid,
  Option,
  Typography,
  useIntl
} from "./chunk-TWYGBUUO.js";
import "./chunk-SPTT7VBO.js";
import "./chunk-T3ZUL7VN.js";
import "./chunk-2MEY62DJ.js";
import {
  ForwardRef$4F
} from "./chunk-WU7BJQIC.js";
import {
  require_jsx_runtime
} from "./chunk-YHVPSBF3.js";
import "./chunk-OJE7GDKQ.js";
import "./chunk-3ZCHZDHB.js";
import {
  __toESM
} from "./chunk-PLDDJCW6.js";

// node_modules/@strapi/content-releases/dist/admin/pages/ReleasesSettingsPage.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var ReleasesSettingsPage = () => {
  const { formatMessage } = useIntl();
  const { formatAPIError } = useAPIErrorHandler();
  const { toggleNotification } = useNotification();
  const { data, isLoading: isLoadingSettings } = useGetReleaseSettingsQuery();
  const [updateReleaseSettings, { isLoading: isSubmittingForm }] = useUpdateReleaseSettingsMutation();
  const permissions = useTypedSelector((state) => {
    var _a;
    return (_a = state.admin_app.permissions["settings"]) == null ? void 0 : _a["releases"];
  });
  const { allowedActions: { canUpdate } } = useRBAC(permissions);
  const { timezoneList } = getTimezones(/* @__PURE__ */ new Date());
  const handleSubmit = async (body) => {
    const { defaultTimezone } = body;
    const isBodyTimezoneValid = timezoneList.some((timezone) => timezone.value === defaultTimezone);
    const newBody = !defaultTimezone || !isBodyTimezoneValid ? {
      defaultTimezone: null
    } : {
      ...body
    };
    try {
      const response = await updateReleaseSettings(newBody);
      if ("data" in response) {
        toggleNotification({
          type: "success",
          message: formatMessage({
            id: "content-releases.pages.Settings.releases.setting.default-timezone-notification-success",
            defaultMessage: "Default timezone updated."
          })
        });
      } else if (isFetchError(response.error)) {
        toggleNotification({
          type: "danger",
          message: formatAPIError(response.error)
        });
      } else {
        toggleNotification({
          type: "danger",
          message: formatMessage({
            id: "notification.error",
            defaultMessage: "An error occurred"
          })
        });
      }
    } catch (error) {
      toggleNotification({
        type: "danger",
        message: formatMessage({
          id: "notification.error",
          defaultMessage: "An error occurred"
        })
      });
    }
  };
  if (isLoadingSettings) {
    return (0, import_jsx_runtime.jsx)(Page.Loading, {});
  }
  return (0, import_jsx_runtime.jsxs)(Layouts.Root, {
    children: [
      (0, import_jsx_runtime.jsx)(Page.Title, {
        children: formatMessage({
          id: "Settings.PageTitle",
          defaultMessage: "Settings - {name}"
        }, {
          name: "Releases"
        })
      }),
      (0, import_jsx_runtime.jsx)(Page.Main, {
        "aria-busy": isLoadingSettings,
        tabIndex: -1,
        children: (0, import_jsx_runtime.jsx)(Form, {
          method: "PUT",
          initialValues: {
            defaultTimezone: data == null ? void 0 : data.data.defaultTimezone
          },
          onSubmit: handleSubmit,
          validationSchema: SETTINGS_SCHEMA,
          children: ({ modified, isSubmitting }) => {
            return (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {
              children: [
                (0, import_jsx_runtime.jsx)(Layouts.Header, {
                  primaryAction: canUpdate ? (0, import_jsx_runtime.jsx)(Button, {
                    disabled: !modified || isSubmittingForm,
                    loading: isSubmitting,
                    startIcon: (0, import_jsx_runtime.jsx)(ForwardRef$4F, {}),
                    type: "submit",
                    children: formatMessage({
                      id: "global.save",
                      defaultMessage: "Save"
                    })
                  }) : null,
                  title: formatMessage({
                    id: "content-releases.pages.Settings.releases.title",
                    defaultMessage: "Releases"
                  }),
                  subtitle: formatMessage({
                    id: "content-releases.pages.Settings.releases.description",
                    defaultMessage: "Create and manage content updates"
                  })
                }),
                (0, import_jsx_runtime.jsx)(Layouts.Content, {
                  children: (0, import_jsx_runtime.jsxs)(Flex, {
                    direction: "column",
                    background: "neutral0",
                    alignItems: "stretch",
                    padding: 6,
                    gap: 6,
                    shadow: "filterShadow",
                    hasRadius: true,
                    children: [
                      (0, import_jsx_runtime.jsx)(Typography, {
                        variant: "delta",
                        tag: "h2",
                        children: formatMessage({
                          id: "content-releases.pages.Settings.releases.preferences.title",
                          defaultMessage: "Preferences"
                        })
                      }),
                      (0, import_jsx_runtime.jsx)(Grid.Root, {
                        children: (0, import_jsx_runtime.jsx)(Grid.Item, {
                          col: 6,
                          s: 12,
                          direction: "column",
                          alignItems: "stretch",
                          children: (0, import_jsx_runtime.jsx)(TimezoneDropdown, {})
                        })
                      })
                    ]
                  })
                })
              ]
            });
          }
        })
      })
    ]
  });
};
var TimezoneDropdown = () => {
  const permissions = useTypedSelector((state) => {
    var _a;
    return (_a = state.admin_app.permissions["settings"]) == null ? void 0 : _a["releases"];
  });
  const { allowedActions: { canUpdate } } = useRBAC(permissions);
  const { formatMessage } = useIntl();
  const { timezoneList } = getTimezones(/* @__PURE__ */ new Date());
  const field = useField("defaultTimezone");
  return (0, import_jsx_runtime.jsxs)(Field.Root, {
    name: "defaultTimezone",
    hint: formatMessage({
      id: "content-releases.pages.Settings.releases.timezone.hint",
      defaultMessage: "The timezone of every release can still be changed individually. "
    }),
    error: field.error,
    children: [
      (0, import_jsx_runtime.jsx)(Field.Label, {
        children: formatMessage({
          id: "content-releases.pages.Settings.releases.timezone.label",
          defaultMessage: "Default timezone"
        })
      }),
      (0, import_jsx_runtime.jsx)(Combobox, {
        autocomplete: {
          type: "list",
          filter: "contains"
        },
        onChange: (value) => field.onChange("defaultTimezone", value),
        onTextValueChange: (value) => field.onChange("defaultTimezone", value),
        onClear: () => field.onChange("defaultTimezone", ""),
        value: field.value,
        disabled: !canUpdate,
        children: timezoneList.map((timezone) => (0, import_jsx_runtime.jsx)(Option, {
          value: timezone.value,
          children: timezone.value.replace(/&/, " ")
        }, timezone.value))
      }),
      (0, import_jsx_runtime.jsx)(Field.Hint, {}),
      (0, import_jsx_runtime.jsx)(Field.Error, {})
    ]
  });
};
var ProtectedReleasesSettingsPage = () => {
  const permissions = useTypedSelector((state) => {
    var _a, _b;
    return (_b = (_a = state.admin_app.permissions["settings"]) == null ? void 0 : _a["releases"]) == null ? void 0 : _b.read;
  });
  return (0, import_jsx_runtime.jsx)(Page.Protect, {
    permissions,
    children: (0, import_jsx_runtime.jsx)(ReleasesSettingsPage, {})
  });
};
export {
  ProtectedReleasesSettingsPage
};
//# sourceMappingURL=ReleasesSettingsPage-4UMQWGD5.js.map
