import {
  getDocumentStatus
} from "./chunk-CA5TK2CX.js";
import {
  FormLayout
} from "./chunk-D4Q4UPD3.js";
import "./chunk-RVOC2XEA.js";
import "./chunk-25F2ZMCJ.js";
import "./chunk-VY2RF72A.js";
import "./chunk-SYWYLB7I.js";
import {
  useGetPreviewUrlQuery
} from "./chunk-7TXT4KKM.js";
import "./chunk-2FCJIZ6A.js";
import {
  InjectionZone
} from "./chunk-ICR3XAS7.js";
import "./chunk-VJCTXLSU.js";
import "./chunk-XSOM6NXW.js";
import "./chunk-RB2GXEEE.js";
import {
  DocumentActionButton,
  DocumentContextProvider,
  DocumentRBAC,
  DocumentStatus,
  useDocumentContext
} from "./chunk-2WY5AECN.js";
import {
  COLLECTION_TYPES,
  buildValidParams,
  createYupSchema,
  useDocument,
  useDocumentLayout
} from "./chunk-KO6C3ZF7.js";
import "./chunk-HIZVCZYI.js";
import "./chunk-C6H2GXKH.js";
import {
  DescriptionComponentRenderer
} from "./chunk-BME6RM4V.js";
import "./chunk-3VZVDA26.js";
import "./chunk-BRZPFF5Q.js";
import "./chunk-2K2OJ6LB.js";
import "./chunk-4J3VOWQV.js";
import "./chunk-S4CCLKAD.js";
import "./chunk-GDJY4RGU.js";
import "./chunk-WTIUMJU3.js";
import "./chunk-DKZQIRB7.js";
import "./chunk-GFF7W2AF.js";
import "./chunk-J2PM6WI7.js";
import "./chunk-Y4RR5YQO.js";
import "./chunk-HULY4JRW.js";
import "./chunk-A24KRZSD.js";
import "./chunk-FONDTKCO.js";
import "./chunk-FUAP7JQL.js";
import "./chunk-BQ76U2V7.js";
import "./chunk-UA3SUHF3.js";
import "./chunk-QU2LYMZX.js";
import "./chunk-LHECCKXZ.js";
import "./chunk-UGODW6W2.js";
import "./chunk-X7GIGLLF.js";
import {
  useHistory
} from "./chunk-KSS6X42G.js";
import "./chunk-RAZDV6NY.js";
import "./chunk-A5LJBSMH.js";
import "./chunk-ZEULAMGP.js";
import "./chunk-QIJGNK42.js";
import {
  useClipboard
} from "./chunk-ZQEV4TPY.js";
import "./chunk-NB7M45EM.js";
import "./chunk-6DL62I5J.js";
import "./chunk-7SWYLNQM.js";
import "./chunk-VNUNK7VE.js";
import "./chunk-XWXUIMUC.js";
import "./chunk-HOYJRKYC.js";
import "./chunk-332DFF7K.js";
import "./chunk-IFOFBKTA.js";
import "./chunk-ROYG4OF2.js";
import "./chunk-NQSRW5O3.js";
import "./chunk-OHWPYT75.js";
import "./chunk-MAHEC27J.js";
import {
  Blocker,
  Form
} from "./chunk-JOJRAWIL.js";
import {
  useRBAC
} from "./chunk-Q2KLBG3G.js";
import "./chunk-FFBCA6Q4.js";
import "./chunk-ITBAD2AQ.js";
import "./chunk-PQINNV4N.js";
import "./chunk-ZPH6YYXY.js";
import {
  Page
} from "./chunk-QW75VRW2.js";
import {
  useQueryParams,
  useStrapiApp
} from "./chunk-7PBF54JY.js";
import "./chunk-6DDO46H4.js";
import "./chunk-5AMSERGP.js";
import {
  createContext
} from "./chunk-6SQZEZYL.js";
import {
  useNotification
} from "./chunk-VHSZPQ7A.js";
import {
  require_lib
} from "./chunk-5CYHFEZZ.js";
import "./chunk-EGSWFI2C.js";
import "./chunk-ZGCR6WZZ.js";
import "./chunk-5VODLFKF.js";
import {
  Box,
  Flex,
  FocusTrap,
  IconButton,
  Portal$1,
  Tabs,
  Typography,
  useIntl
} from "./chunk-TWYGBUUO.js";
import "./chunk-SPTT7VBO.js";
import {
  Link,
  useLocation,
  useParams
} from "./chunk-T3ZUL7VN.js";
import "./chunk-2MEY62DJ.js";
import {
  ForwardRef$2r,
  ForwardRef$45,
  ForwardRef$5h
} from "./chunk-WU7BJQIC.js";
import {
  require_jsx_runtime
} from "./chunk-YHVPSBF3.js";
import {
  dt
} from "./chunk-OJE7GDKQ.js";
import {
  require_react
} from "./chunk-3ZCHZDHB.js";
import {
  __toESM
} from "./chunk-PLDDJCW6.js";

// node_modules/@strapi/content-manager/dist/admin/preview/pages/Preview.mjs
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var React = __toESM(require_react(), 1);

// node_modules/@strapi/content-manager/dist/admin/preview/components/PreviewHeader.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_react = __toESM(require_react(), 1);
var import_qs = __toESM(require_lib(), 1);
var ClosePreviewButton = () => {
  const [{ query }] = useQueryParams();
  const { formatMessage } = useIntl();
  const canGoBack = useHistory("BackButton", (state) => state.canGoBack);
  const goBack = useHistory("BackButton", (state) => state.goBack);
  const history = useHistory("BackButton", (state) => state.history);
  const locationIndex = useHistory("BackButton", (state) => state.currentLocationIndex);
  const historyTo = canGoBack ? history.at(locationIndex - 2) : void 0;
  const fallback = {
    pathname: "..",
    search: (0, import_qs.stringify)(query, {
      encode: false
    })
  };
  const toWithFallback = historyTo ?? fallback;
  const handleClick = (e) => {
    if (canGoBack) {
      e.preventDefault();
      goBack();
      return;
    }
  };
  return (0, import_jsx_runtime.jsx)(IconButton, {
    variant: "ghost",
    tag: Link,
    relative: "path",
    to: toWithFallback,
    onClick: handleClick,
    label: formatMessage({
      id: "content-manager.preview.header.close",
      defaultMessage: "Close preview"
    }),
    children: (0, import_jsx_runtime.jsx)(ForwardRef$45, {})
  });
};
var Status = () => {
  var _a;
  const document = usePreviewContext("PreviewHeader", (state) => state.document);
  const schema = usePreviewContext("PreviewHeader", (state) => state.schema);
  const meta = usePreviewContext("PreviewHeader", (state) => state.meta);
  const hasDraftAndPublished = ((_a = schema == null ? void 0 : schema.options) == null ? void 0 : _a.draftAndPublish) ?? false;
  if (!hasDraftAndPublished) {
    return null;
  }
  const status = getDocumentStatus(document, meta);
  return (0, import_jsx_runtime.jsx)(DocumentStatus, {
    status,
    size: "XS"
  });
};
var PreviewTabs = () => {
  var _a;
  const { formatMessage } = useIntl();
  const [{ query }, setQuery] = useQueryParams();
  const document = usePreviewContext("PreviewHeader", (state) => state.document);
  const schema = usePreviewContext("PreviewHeader", (state) => state.schema);
  const meta = usePreviewContext("PreviewHeader", (state) => state.meta);
  const hasDraftAndPublish = ((_a = schema == null ? void 0 : schema.options) == null ? void 0 : _a.draftAndPublish) ?? false;
  const documentStatus = getDocumentStatus(document, meta);
  const handleTabChange = (status) => {
    if (status === "published" || status === "draft") {
      setQuery({
        status
      }, "push", true);
    }
  };
  if (!hasDraftAndPublish) {
    return null;
  }
  return (0, import_jsx_runtime.jsx)(Tabs.Root, {
    variant: "simple",
    value: query.status || "draft",
    onValueChange: handleTabChange,
    children: (0, import_jsx_runtime.jsxs)(Tabs.List, {
      "aria-label": formatMessage({
        id: "preview.tabs.label",
        defaultMessage: "Document status"
      }),
      children: [
        (0, import_jsx_runtime.jsx)(StatusTab, {
          value: "draft",
          children: formatMessage({
            id: "content-manager.containers.List.draft",
            defaultMessage: "draft"
          })
        }),
        (0, import_jsx_runtime.jsx)(StatusTab, {
          value: "published",
          disabled: documentStatus === "draft",
          children: formatMessage({
            id: "content-manager.containers.List.published",
            defaultMessage: "published"
          })
        })
      ]
    })
  });
};
var PreviewHeader = () => {
  var _a;
  const title = usePreviewContext("PreviewHeader", (state) => state.title);
  const document = usePreviewContext("PreviewHeader", (state) => state.document);
  const schema = usePreviewContext("PreviewHeader", (state) => state.schema);
  const meta = usePreviewContext("PreviewHeader", (state) => state.meta);
  const plugins = useStrapiApp("PreviewHeader", (state) => state.plugins);
  const onPreview = useDocumentContext("PreviewHeader", (state) => state.onPreview);
  const [{ query }] = useQueryParams();
  const { formatMessage } = useIntl();
  const { toggleNotification } = useNotification();
  const { copy } = useClipboard();
  const handleCopyLink = () => {
    copy(window.location.href);
    toggleNotification({
      message: formatMessage({
        id: "content-manager.preview.copy.success",
        defaultMessage: "Copied preview link"
      }),
      type: "success"
    });
  };
  const hasDraftAndPublish = ((_a = schema.options) == null ? void 0 : _a.draftAndPublish) ?? false;
  const documentActionProps = {
    activeTab: query.status ?? null,
    collectionType: schema.kind === "collectionType" ? "collection-types" : "single-types",
    model: schema.uid,
    documentId: document.documentId,
    document,
    meta,
    onPreview,
    fromPreview: true
  };
  return (0, import_jsx_runtime.jsxs)(Flex, {
    height: "48px",
    gap: 4,
    background: "neutral0",
    borderColor: "neutral150",
    tag: "header",
    children: [
      (0, import_jsx_runtime.jsxs)(TitleContainer, {
        height: "100%",
        paddingLeft: 2,
        paddingRight: 4,
        children: [
          (0, import_jsx_runtime.jsx)(ClosePreviewButton, {}),
          (0, import_jsx_runtime.jsx)(PreviewTitle, {
            tag: "h1",
            title,
            maxWidth: "200px",
            fontSize: 2,
            paddingLeft: 2,
            paddingRight: 3,
            fontWeight: 600,
            children: title
          }),
          (0, import_jsx_runtime.jsx)(Status, {})
        ]
      }),
      (0, import_jsx_runtime.jsxs)(Flex, {
        flex: 1,
        paddingRight: 2,
        gap: 2,
        justifyContent: hasDraftAndPublish ? "space-between" : "flex-end",
        children: [
          (0, import_jsx_runtime.jsx)(Flex, {
            flex: "1 1 70%",
            children: (0, import_jsx_runtime.jsx)(PreviewTabs, {})
          }),
          (0, import_jsx_runtime.jsxs)(Flex, {
            gap: 2,
            children: [
              (0, import_jsx_runtime.jsx)(IconButton, {
                type: "button",
                label: formatMessage({
                  id: "preview.copy.label",
                  defaultMessage: "Copy preview link"
                }),
                onClick: handleCopyLink,
                children: (0, import_jsx_runtime.jsx)(ForwardRef$2r, {})
              }),
              (0, import_jsx_runtime.jsx)(InjectionZone, {
                area: "preview.actions"
              }),
              (0, import_jsx_runtime.jsx)(DescriptionComponentRenderer, {
                props: documentActionProps,
                descriptions: plugins["content-manager"].apis.getDocumentActions("preview"),
                children: (actions) => {
                  const filteredActions = actions.filter((action) => [
                    action.position
                  ].flat().includes("preview"));
                  const [primaryAction, secondaryAction] = filteredActions;
                  if (!primaryAction && !secondaryAction) return null;
                  if (primaryAction && secondaryAction) {
                    return (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {
                      children: [
                        (0, import_jsx_runtime.jsx)(DocumentActionButton, {
                          ...secondaryAction,
                          variant: secondaryAction.variant || "secondary"
                        }),
                        (0, import_jsx_runtime.jsx)(DocumentActionButton, {
                          ...primaryAction,
                          variant: primaryAction.variant || "default"
                        })
                      ]
                    });
                  }
                  return (0, import_jsx_runtime.jsx)(DocumentActionButton, {
                    ...primaryAction,
                    variant: primaryAction.variant || "secondary"
                  });
                }
              })
            ]
          })
        ]
      })
    ]
  });
};
var PreviewTitle = dt(Typography)`
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
`;
var StatusTab = dt(Tabs.Trigger)`
  text-transform: uppercase;
`;
var TitleContainer = dt(Flex)`
  border-right: 1px solid ${({ theme }) => theme.colors.neutral150};
`;

// node_modules/@strapi/content-manager/dist/admin/preview/pages/Preview.mjs
var [PreviewProvider, usePreviewContext] = createContext("PreviewPage");
var AnimatedArrow = dt(ForwardRef$5h)`
  will-change: transform;
  rotate: ${(props) => props.isSideEditorOpen ? "0deg" : "180deg"};
  transition: rotate 0.2s ease-in-out;
`;
var PreviewPage = () => {
  var _a, _b, _c, _d;
  const location = useLocation();
  const { formatMessage } = useIntl();
  const iframeRef = React.useRef(null);
  const [isSideEditorOpen, setIsSideEditorOpen] = React.useState(true);
  const { slug: model, id: documentId, collectionType } = useParams();
  const [{ query }] = useQueryParams();
  const params = React.useMemo(() => buildValidParams(query), [
    query
  ]);
  if (!collectionType) {
    throw new Error("Could not find collectionType in url params");
  }
  if (!model) {
    throw new Error("Could not find model in url params");
  }
  if (collectionType === COLLECTION_TYPES && !documentId) {
    throw new Error("Could not find documentId in url params");
  }
  const previewUrlResponse = useGetPreviewUrlQuery({
    params: {
      contentType: model
    },
    query: {
      documentId,
      locale: params.locale,
      status: params.status
    }
  });
  const documentResponse = useDocument({
    model,
    collectionType,
    documentId,
    params
  });
  const documentLayoutResponse = useDocumentLayout(model);
  const isLoading = previewUrlResponse.isLoading || documentLayoutResponse.isLoading || documentResponse.isLoading;
  if (isLoading && !((_a = documentResponse.document) == null ? void 0 : _a.documentId)) {
    return (0, import_jsx_runtime2.jsx)(Page.Loading, {});
  }
  const initialValues = documentResponse.getInitialFormValues();
  if (previewUrlResponse.error || documentLayoutResponse.error || !documentResponse.document || !documentResponse.meta || !documentResponse.schema || !initialValues) {
    return (0, import_jsx_runtime2.jsx)(Page.Error, {});
  }
  if (!((_c = (_b = previewUrlResponse.data) == null ? void 0 : _b.data) == null ? void 0 : _c.url)) {
    return (0, import_jsx_runtime2.jsx)(Page.NoData, {});
  }
  const documentTitle = documentResponse.getTitle(documentLayoutResponse.edit.settings.mainField);
  const validateSync = (values, options) => {
    var _a2, _b2;
    const yupSchema = createYupSchema((_a2 = documentResponse.schema) == null ? void 0 : _a2.attributes, documentResponse.components, {
      status: (_b2 = documentResponse.document) == null ? void 0 : _b2.status,
      ...options
    });
    return yupSchema.validateSync(values, {
      abortEarly: false
    });
  };
  const previewUrl = previewUrlResponse.data.data.url;
  const onPreview = () => {
    var _a2, _b2;
    (_b2 = (_a2 = iframeRef == null ? void 0 : iframeRef.current) == null ? void 0 : _a2.contentWindow) == null ? void 0 : _b2.postMessage(
      {
        type: "strapiUpdate"
      },
      // The iframe origin is safe to use since it must be provided through the allowedOrigins config
      new URL(iframeRef.current.src).origin
    );
  };
  const hasAdvancedPreview = window.strapi.features.isEnabled("cms-advanced-preview");
  return (0, import_jsx_runtime2.jsxs)(import_jsx_runtime2.Fragment, {
    children: [
      (0, import_jsx_runtime2.jsx)(Page.Title, {
        children: formatMessage({
          id: "content-manager.preview.page-title",
          defaultMessage: "{contentType} preview"
        }, {
          contentType: documentTitle
        })
      }),
      (0, import_jsx_runtime2.jsx)(DocumentContextProvider, {
        initialDocument: {
          documentId: documentId || "",
          model,
          collectionType
        },
        onPreview,
        children: (0, import_jsx_runtime2.jsx)(PreviewProvider, {
          url: previewUrl,
          document: documentResponse.document,
          title: documentTitle,
          meta: documentResponse.meta,
          schema: documentResponse.schema,
          layout: documentLayoutResponse.edit,
          children: (0, import_jsx_runtime2.jsx)(Form, {
            method: "PUT",
            disabled: query.status === "published" && documentResponse && documentResponse.document.status === "published",
            initialValues: documentResponse.getInitialFormValues(),
            initialErrors: ((_d = location == null ? void 0 : location.state) == null ? void 0 : _d.forceValidation) ? validateSync(initialValues, {}) : {},
            height: "100%",
            validate: (values, options) => {
              var _a2, _b2;
              const yupSchema = createYupSchema((_a2 = documentResponse.schema) == null ? void 0 : _a2.attributes, documentResponse.components, {
                status: (_b2 = documentResponse.document) == null ? void 0 : _b2.status,
                ...options
              });
              return yupSchema.validate(values, {
                abortEarly: false
              });
            },
            children: ({ resetForm }) => (0, import_jsx_runtime2.jsxs)(Flex, {
              direction: "column",
              height: "100%",
              alignItems: "stretch",
              children: [
                (0, import_jsx_runtime2.jsx)(Blocker, {
                  onProceed: resetForm
                }),
                (0, import_jsx_runtime2.jsx)(PreviewHeader, {}),
                (0, import_jsx_runtime2.jsxs)(Flex, {
                  flex: 1,
                  overflow: "auto",
                  alignItems: "stretch",
                  children: [
                    hasAdvancedPreview && (0, import_jsx_runtime2.jsx)(Box, {
                      overflow: "auto",
                      width: isSideEditorOpen ? "50%" : 0,
                      borderWidth: "0 1px 0 0",
                      borderColor: "neutral150",
                      paddingTop: 6,
                      paddingBottom: 6,
                      // Remove horizontal padding when the editor is closed or it won't fully disappear
                      paddingLeft: isSideEditorOpen ? 6 : 0,
                      paddingRight: isSideEditorOpen ? 6 : 0,
                      transition: "all 0.2s ease-in-out",
                      children: (0, import_jsx_runtime2.jsx)(FormLayout, {
                        layout: documentLayoutResponse.edit.layout,
                        document: documentResponse,
                        hasBackground: false
                      })
                    }),
                    (0, import_jsx_runtime2.jsxs)(Box, {
                      position: "relative",
                      flex: 1,
                      height: "100%",
                      overflow: "hidden",
                      children: [
                        (0, import_jsx_runtime2.jsx)(Box, {
                          "data-testid": "preview-iframe",
                          ref: iframeRef,
                          src: previewUrl,
                          title: formatMessage({
                            id: "content-manager.preview.panel.title",
                            defaultMessage: "Preview"
                          }),
                          width: "100%",
                          height: "100%",
                          borderWidth: 0,
                          tag: "iframe"
                        }, previewUrl),
                        hasAdvancedPreview && (0, import_jsx_runtime2.jsx)(IconButton, {
                          variant: "tertiary",
                          label: formatMessage(isSideEditorOpen ? {
                            id: "content-manager.preview.content.close-editor",
                            defaultMessage: "Close editor"
                          } : {
                            id: "content-manager.preview.content.open-editor",
                            defaultMessage: "Open editor"
                          }),
                          onClick: () => setIsSideEditorOpen((prev) => !prev),
                          position: "absolute",
                          top: 2,
                          left: 2,
                          children: (0, import_jsx_runtime2.jsx)(AnimatedArrow, {
                            isSideEditorOpen
                          })
                        })
                      ]
                    })
                  ]
                })
              ]
            })
          })
        })
      })
    ]
  });
};
var ProtectedPreviewPageImpl = () => {
  const { slug: model } = useParams();
  const { permissions = [], isLoading, error } = useRBAC([
    {
      action: "plugin::content-manager.explorer.read",
      subject: model
    },
    {
      action: "plugin::content-manager.explorer.update",
      subject: model
    },
    {
      action: "plugin::content-manager.explorer.publish",
      subject: model
    }
  ]);
  if (isLoading) {
    return (0, import_jsx_runtime2.jsx)(Page.Loading, {});
  }
  if (error || !model) {
    return (0, import_jsx_runtime2.jsx)(Box, {
      height: "100vh",
      width: "100vw",
      position: "fixed",
      top: 0,
      left: 0,
      zIndex: 2,
      background: "neutral0",
      children: (0, import_jsx_runtime2.jsx)(Page.Error, {})
    });
  }
  return (0, import_jsx_runtime2.jsx)(Box, {
    height: "100vh",
    width: "100vw",
    position: "fixed",
    top: 0,
    left: 0,
    zIndex: 2,
    background: "neutral0",
    children: (0, import_jsx_runtime2.jsx)(Page.Protect, {
      permissions: permissions.filter((permission) => permission.action.includes("explorer.read")),
      children: (0, import_jsx_runtime2.jsx)(DocumentRBAC, {
        permissions,
        children: (0, import_jsx_runtime2.jsx)(PreviewPage, {})
      })
    })
  });
};
var ProtectedPreviewPage = () => {
  return (0, import_jsx_runtime2.jsx)(Portal$1, {
    children: (0, import_jsx_runtime2.jsx)(FocusTrap, {
      children: (0, import_jsx_runtime2.jsx)(ProtectedPreviewPageImpl, {})
    })
  });
};
export {
  ProtectedPreviewPage,
  usePreviewContext
};
//# sourceMappingURL=Preview-XZBZLEEN.js.map
